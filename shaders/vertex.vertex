


#define shader_v2 vec2
#define shader_v4 vec4
#define shader_float float
#define shader_int int
#define shader_bool int

struct s_transform
{
	shader_bool do_clip;
	shader_bool do_circle;
	shader_bool do_light;
	shader_bool do_noise;
	shader_bool flip_x;
	shader_int layer;
	shader_int texture_id;
	shader_int sublayer;
	shader_int background_id;
	shader_float mix_weight;
	shader_v2 pos;
	shader_v2 origin_offset;
	shader_v2 draw_size;
	shader_v2 texture_size;
	shader_v2 clip_pos;
	shader_v2 clip_size;
	shader_v2 uv_min;
	shader_v2 uv_max;
	shader_v4 color;
	shader_v4 mix_color;
};




layout(std430, binding = 0) buffer buffer_name
{
	s_transform transforms[];
};

out vec2 v_local_uv;
out vec2 v_uv;
out flat s_transform v_t;
out flat vec3 v_color;

uniform vec2 window_size;
uniform float time;

vec3 hsv_2_rgb(vec3 color)
{
	vec4 k = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + k.xyz) * 6.0 - k.www);
	return color.z * mix(k.xxx, clamp(p - k.xxx, 0.0, 1.0), color.y);
}

float range_lerp(float val, float amin, float amax, float bmin, float bmax)
{
	float p = (val - amin) / (amax - amin);
	return bmin + (bmax - bmin) * p;
}

void main()
{

	float v_size = 1.0;
	vec2 vertices[] = {
		vec2(-v_size, v_size),
		vec2(v_size, v_size),
		vec2(v_size, -v_size),
		vec2(-v_size, v_size),
		vec2(v_size, -v_size),
		vec2(-v_size, -v_size),
	};

	vec2 local_uv[] = {
		vec2(0, 0),
		vec2(1, 0),
		vec2(1, 1),
		vec2(0, 0),
		vec2(1, 1),
		vec2(0, 1),
	};

	s_transform t = transforms[gl_InstanceID];

	float min_uv_x = t.flip_x != 0 ? t.uv_max.x : t.uv_min.x;
	float max_uv_x = t.flip_x != 0 ? t.uv_min.x : t.uv_max.x;
	vec2 topleft = vec2(
		min_uv_x,
		t.uv_min.y
	);
	vec2 topright = vec2(
		max_uv_x,
		t.uv_min.y
	);
	vec2 bottomright = vec2(
		max_uv_x,
		t.uv_max.y
	);
	vec2 bottomleft = vec2(
		min_uv_x,
		t.uv_max.y
	);

	vec2 uvs[] = {
		topleft,
		topright,
		bottomright,
		topleft,
		bottomright,
		bottomleft,
	};

	vec2 pos = t.pos * (2 / window_size) - 1;
	pos.y *= -1;
	vec2 size = t.draw_size / window_size;

	v_t = t;
	v_color = (t.background_id == 3) ? hsv_2_rgb(vec3(fract(time * 0.0855), 0.75, 0.75)) : vec3(1.0, 1.0, 1.0);

	// float z = range_lerp(t.layer, 0, 1000, 0, 1);
	float z = t.layer / 100.0;
	z += t.sublayer / 4.0 / 100.0;

	v_uv = uvs[gl_VertexID];
	v_local_uv = local_uv[gl_VertexID];
	gl_Position = vec4((vertices[gl_VertexID] + t.origin_offset) * size + pos, z, 1);
}
